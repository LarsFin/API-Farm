// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	apifarm "apifarm/src"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *Service) Add(_a0 []byte) apifarm.Query {
	ret := _m.Called(_a0)

	var r0 apifarm.Query
	if rf, ok := ret.Get(0).(func([]byte) apifarm.Query); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(apifarm.Query)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *Service) Get(_a0 uint) apifarm.Query {
	ret := _m.Called(_a0)

	var r0 apifarm.Query
	if rf, ok := ret.Get(0).(func(uint) apifarm.Query); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(apifarm.Query)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() apifarm.Query {
	ret := _m.Called()

	var r0 apifarm.Query
	if rf, ok := ret.Get(0).(func() apifarm.Query); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apifarm.Query)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Service) Update(_a0 uint, _a1 []byte) apifarm.Query {
	ret := _m.Called(_a0, _a1)

	var r0 apifarm.Query
	if rf, ok := ret.Get(0).(func(uint, []byte) apifarm.Query); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(apifarm.Query)
	}

	return r0
}

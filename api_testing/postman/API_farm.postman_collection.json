{
	"info": {
		"_postman_id": "43f977a4-cdfb-459b-a07b-c72ad6034b88",
		"name": "API_farm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Samples",
			"item": [
				{
					"name": "Get video games",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/video_games",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"video_games"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\r\n    {\r\n        \"name\": \"Age of Empires II\",\r\n        \"developers\": [\r\n            \"Ensemble Studios\"\r\n        ],\r\n        \"publishers\": [\r\n            \"Microsoft\",\r\n            \"Konami\"\r\n        ],\r\n        \"designers\": [\r\n            \"Bruce Shelley\"\r\n        ],\r\n        \"programmers\": [\r\n            \"Angelo Laudon\"\r\n        ],\r\n        \"artists\": [\r\n            \"Brad Crow\",\r\n            \"Scott Winsett\"\r\n        ],\r\n        \"composers\": [\r\n            \"Stephen Rippy\"\r\n        ],\r\n        \"platforms\": [\r\n            \"Microsoft Windows\",\r\n            \"Mac OS\",\r\n            \"Playstation 2\"\r\n        ],\r\n        \"date_released\": \"30/09/1999\"\r\n    },\r\n\r\n    {\r\n        \"name\": \"Banjo Kazooie\",\r\n        \"developers\": [\r\n            \"Rare\"\r\n        ],\r\n        \"publishers\": [\r\n            \"Nintendo\"\r\n        ],\r\n        \"directors\": [\r\n            \"Gregg Mayles\",\r\n            \"George Andreas\"\r\n        ],\r\n        \"producers\": [\r\n            \"Tim Stamper\",\r\n            \"Chris Stamper\"\r\n        ],\r\n        \"designers\": [\r\n            \"Gregg Mayles\"\r\n        ],\r\n        \"programmers\": [\r\n            \"Chris Sutherland\"\r\n        ],\r\n        \"artists\": [\r\n            \"Steve Mayles\",\r\n            \"John Nash\",\r\n            \"Kevin Bayliss\",\r\n            \"Tim Stamper\"\r\n        ],\r\n        \"composers\": [\r\n            \"Grant Kirkhope\"\r\n        ],\r\n        \"platforms\": [\r\n            \"Nintendo 64\"\r\n        ],\r\n        \"date_released\": \"29/06/1998\"\r\n    }\r\n]"
						}
					]
				},
				{
					"name": "Get video game",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/video_games/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"video_games",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "25"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "No video game with id '25' could be found."
						},
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Banjo Kazooie\",\n    \"developers\": [\n        \"Rare\"\n    ],\n    \"publishers\": [\n        \"Nintendo\"\n    ],\n    \"directors\": [\n        \"Gregg Mayles\",\n        \"George Andreas\"\n    ],\n    \"producers\": [\n        \"Tim Stamper\",\n        \"Chris Stamper\"\n    ],\n    \"designers\": [\n        \"Gregg Mayles\"\n    ],\n    \"programmers\": [\n        \"Chris Sutherland\"\n    ],\n    \"artists\": [\n        \"Steve Mayles\",\n        \"John Nash\",\n        \"Kevin Bayliss\",\n        \"Tim Stamper\"\n    ],\n    \"composers\": [\n        \"Grant Kirkhope\"\n    ],\n    \"platforms\": [\n        \"Nintendo 64\"\n    ],\n    \"date_released\": \"29/06/1998\"\n}"
						},
						{
							"name": "400 Invalid Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided id 'invalid!' is invalid."
						}
					]
				},
				{
					"name": "Add video game",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29/06/1998\"\r\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/video_games",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"video_games"
							]
						}
					},
					"response": [
						{
							"name": "201 Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29/06/1998\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"id\": 1,\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29/06/1998\"\r\n}"
						},
						{
							"name": "400 Invalid Date Released",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29th June 1998\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided date_released '29th June 1998' is invalid."
						},
						{
							"name": "400 Invalid Body JSON",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Banjo Kazooie\"\r\n    \"date_released\": \"29/06/1998\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "Invalid JSON in body."
						},
						{
							"name": "400 Invalid Attribute",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"testers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29/06/1998\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided data has an invalid attribute 'testers'."
						},
						{
							"name": "400 Date Released Required",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Banjo Kazooie\",\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "A date_released is required for a video game."
						},
						{
							"name": "400 Name Required",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"developers\": [\r\n        \"Rare\"\r\n    ],\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n        \"Gregg Mayles\",\r\n        \"George Andreas\"\r\n    ],\r\n    \"producers\": [\r\n        \"Tim Stamper\",\r\n        \"Chris Stamper\"\r\n    ],\r\n    \"designers\": [\r\n        \"Gregg Mayles\"\r\n    ],\r\n    \"programmers\": [\r\n        \"Chris Sutherland\"\r\n    ],\r\n    \"artists\": [\r\n        \"Steve Mayles\",\r\n        \"John Nash\",\r\n        \"Kevin Bayliss\",\r\n        \"Tim Stamper\"\r\n    ],\r\n    \"composers\": [\r\n        \"Grant Kirkhope\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n    ],\r\n    \"date_released\": \"29/06/1998\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "A name is required for a video game."
						}
					]
				},
				{
					"name": "Update video game",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/video_games/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"video_games",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Banjo Kazooie\",\n    \"developers\": [\n        \"Rare\"\n    ],\n    \"publishers\": [\n        \"Nintendo\",\n        \"Microsoft Game Studios\"\n    ],\n    \"directors\": [\n        \"Gregg Mayles\",\n        \"George Andreas\"\n    ],\n    \"producers\": [\n        \"Tim Stamper\",\n        \"Chris Stamper\"\n    ],\n    \"designers\": [\n        \"Gregg Mayles\"\n    ],\n    \"programmers\": [\n        \"Chris Sutherland\"\n    ],\n    \"artists\": [\n        \"Steve Mayles\",\n        \"John Nash\",\n        \"Kevin Bayliss\",\n        \"Tim Stamper\"\n    ],\n    \"composers\": [\n        \"Grant Kirkhope\"\n    ],\n    \"platforms\": [\n        \"Nintendo 64\",\n        \"Xbox 360\"\n    ],\n    \"date_released\": \"29/06/1998\"\n}"
						},
						{
							"name": "400 Invalid Body JSON",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\"\r\n        \"Xbox 360\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "Invalid JSON in body."
						},
						{
							"name": "400 Invalid Id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided id 'invalid!' is invalid."
						},
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "25"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "No video game with id '25' could be found."
						},
						{
							"name": "400 Invalid Attribute",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"testers\": [\r\n        \"Chris Sutherland\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided data has an invalid attribute 'testers'."
						},
						{
							"name": "400 Invalid Date Released",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date_released\": \"Last Monday\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided date_released 'Last Monday' is invalid."
						}
					]
				},
				{
					"name": "Remove video game",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/video_games/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"video_games",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "Deleted video game with id '1'."
						},
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "25"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "No video game with id '25' could be found."
						},
						{
							"name": "400 Invalid Id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "The provided id 'invalid!' is invalid."
						}
					]
				},
				{
					"name": "Setup API Tests",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/api_tests/setup",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api_tests",
								"setup"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/api_tests/setup",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api_tests",
										"setup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "Successfully loaded data."
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Get video games",
					"item": [
						{
							"name": "200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"getExpectedData(pm, \"get_video_games/ok.json\", body => {\r",
											"    pm.variables.set(\"expected_body\", body)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes all initial video games\", () => {\r",
											"    const body = pm.response.json();\r",
											"    jsonDiff(pm, pm.variables.get(\"expected_body\"), body);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get video game",
					"item": [
						{
							"name": "200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"getExpectedData(pm, \"get_video_game/ok.json\", body => {\r",
											"    pm.variables.set(\"expected_body\", body);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes requested video game\", () => {\r",
											"    const body = pm.response.json();\r",
											"    jsonDiff(pm, pm.variables.get(\"expected_body\"), body);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided id 'invalid!' is invalid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states video game was not found\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"No video game with id '99' could be found.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add video game",
					"item": [
						{
							"name": "201 Created (1)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"getExpectedData(pm, \"add_video_game/created_1.json\", body => {\r",
											"    pm.variables.set(\"expected_body\", body);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes newly created video game\", () => {\r",
											"    const body = pm.response.json();\r",
											"    jsonDiff(pm, pm.variables.get(\"expected_body\"), body);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Bloodborne\",\r\n    \"developers\": [\r\n      \"FromSoftware\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Sony Computer Entertainment\"\r\n    ],\r\n    \"directors\": [\r\n      \"Hidetaka Miyazaki\"\r\n    ],\r\n    \"producers\": [\r\n      \"Masaaki Yamagiwa\",\r\n      \"Teruyuki Toriyama\"\r\n    ],\r\n    \"designers\": [\r\n      \"Kazuhiro Hamatani\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Jun Ito\"\r\n    ],\r\n    \"artists\": [\r\n      \"Ryo Fujimaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Ryan Amon\",\r\n      \"Tsukasa Saitoh\",\r\n      \"Yuka Kitamura\",\r\n      \"Nobuyoshi Suzuki\",\r\n      \"Cris Velasco\",\r\n      \"Michael Wandmacher\"\r\n    ],\r\n    \"platforms\": [\r\n      \"Playstation 4\"\r\n    ],\r\n    \"date_released\": \"24/03/2015\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 Created (2)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"getExpectedData(pm, \"add_video_game/created_2.json\", body => {\r",
											"    pm.variables.set(\"expected_body\", body);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes newly created video game\", () => {\r",
											"    const body = pm.response.json();\r",
											"    jsonDiff(pm, pm.variables.get(\"expected_body\"), body);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Super Mario Sunshine\",\r\n    \"developers\": [\r\n      \"Nintendo EAD\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Nintendo\"\r\n    ],\r\n    \"directors\": [\r\n      \"Yoshiaki Koizumi\",\r\n      \"Kenta Usui\"\r\n    ],\r\n    \"producers\": [\r\n      \"Shigeru Miyamoto\",\r\n      \"Takashi Tezuka\"\r\n    ],\r\n    \"designers\": [\r\n      \"Hiromu Takemura\",\r\n      \"Atsushi Miyagi\",\r\n      \"Taeko Suguwara\",\r\n      \"Kazumi Yamaguchi\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Koichi Hayashida\",\r\n      \"Shunsaku Kitamura\",\r\n      \"Shinichi Sasaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Koji Kondo\",\r\n      \"Shinobu Tanaka\"\r\n    ],\r\n    \"platforms\": [\r\n      \"GameCube\"\r\n    ],\r\n    \"date_released\": \"19/07/2002\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Date Released Required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"A date_released is required for a video game.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Bloodborne\",\r\n    \"developers\": [\r\n      \"FromSoftware\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Sony Computer Entertainment\"\r\n    ],\r\n    \"directors\": [\r\n      \"Hidetaka Miyazaki\"\r\n    ],\r\n    \"producers\": [\r\n      \"Masaaki Yamagiwa\",\r\n      \"Teruyuki Toriyama\"\r\n    ],\r\n    \"designers\": [\r\n      \"Kazuhiro Hamatani\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Jun Ito\"\r\n    ],\r\n    \"artists\": [\r\n      \"Ryo Fujimaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Ryan Amon\",\r\n      \"Tsukasa Saitoh\",\r\n      \"Yuka Kitamura\",\r\n      \"Nobuyoshi Suzuki\",\r\n      \"Cris Velasco\",\r\n      \"Michael Wandmacher\"\r\n    ],\r\n    \"platforms\": [\r\n      \"Playstation 4\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Attribute",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided data has an invalid attribute 'testers'.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Bloodborne\",\r\n    \"developers\": [\r\n      \"FromSoftware\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Sony Computer Entertainment\"\r\n    ],\r\n    \"directors\": [\r\n      \"Hidetaka Miyazaki\"\r\n    ],\r\n    \"producers\": [\r\n      \"Masaaki Yamagiwa\",\r\n      \"Teruyuki Toriyama\"\r\n    ],\r\n    \"designers\": [\r\n      \"Kazuhiro Hamatani\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Jun Ito\"\r\n    ],\r\n    \"artists\": [\r\n      \"Ryo Fujimaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Ryan Amon\",\r\n      \"Tsukasa Saitoh\",\r\n      \"Yuka Kitamura\",\r\n      \"Nobuyoshi Suzuki\",\r\n      \"Cris Velasco\",\r\n      \"Michael Wandmacher\"\r\n    ],\r\n    \"platforms\": [\r\n      \"Playstation 4\"\r\n    ],\r\n    \"date_released\": \"24/03/2015\",\r\n    \"testers\": [\r\n      \"Jun Ito\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Body JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"Invalid JSON in body.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Bloodborne\"\r\n    \"date_released\": \"24/03/2015\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Date Released",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes all initial video games\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided date_released '03/24/2015' is invalid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Bloodborne\",\r\n    \"developers\": [\r\n      \"FromSoftware\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Sony Computer Entertainment\"\r\n    ],\r\n    \"directors\": [\r\n      \"Hidetaka Miyazaki\"\r\n    ],\r\n    \"producers\": [\r\n      \"Masaaki Yamagiwa\",\r\n      \"Teruyuki Toriyama\"\r\n    ],\r\n    \"designers\": [\r\n      \"Kazuhiro Hamatani\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Jun Ito\"\r\n    ],\r\n    \"artists\": [\r\n      \"Ryo Fujimaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Ryan Amon\",\r\n      \"Tsukasa Saitoh\",\r\n      \"Yuka Kitamura\",\r\n      \"Nobuyoshi Suzuki\",\r\n      \"Cris Velasco\",\r\n      \"Michael Wandmacher\"\r\n    ],\r\n    \"platforms\": [\r\n      \"Playstation 4\"\r\n    ],\r\n    \"date_released\": \"03/24/2015\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Name Required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"A name is required for a video game.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"developers\": [\r\n      \"FromSoftware\"\r\n    ],\r\n    \"publishers\": [\r\n      \"Sony Computer Entertainment\"\r\n    ],\r\n    \"directors\": [\r\n      \"Hidetaka Miyazaki\"\r\n    ],\r\n    \"producers\": [\r\n      \"Masaaki Yamagiwa\",\r\n      \"Teruyuki Toriyama\"\r\n    ],\r\n    \"designers\": [\r\n      \"Kazuhiro Hamatani\"\r\n    ],\r\n    \"programmers\": [\r\n      \"Jun Ito\"\r\n    ],\r\n    \"artists\": [\r\n      \"Ryo Fujimaki\"\r\n    ],\r\n    \"composers\": [\r\n      \"Ryan Amon\",\r\n      \"Tsukasa Saitoh\",\r\n      \"Yuka Kitamura\",\r\n      \"Nobuyoshi Suzuki\",\r\n      \"Cris Velasco\",\r\n      \"Michael Wandmacher\"\r\n    ],\r\n    \"platforms\": [\r\n      \"Playstation 4\"\r\n    ],\r\n    \"date_released\": \"24/03/2015\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update video game",
					"item": [
						{
							"name": "200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"getExpectedData(pm, \"update_video_game/ok.json\", body => {\r",
											"    pm.variables.set(\"expected_body\", body);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body includes updated version of video game\", () => {\r",
											"    const body = pm.response.json();\r",
											"    jsonDiff(pm, pm.variables.get(\"expected_body\"), body);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Attribute",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided data has an invalid attribute 'testers'.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"testers\": [\r\n        \"Chris Sutherland\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Body JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"Invalid JSON in body.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\"\r\n        \"Microsoft Game Studios\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Date Released",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided date_released '06/29/1998' is invalid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date_released\": \"06/29/1998\"\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided id 'invalid!' is invalid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states video game was not found\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"No video game with id '99' could be found.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"publishers\": [\r\n        \"Nintendo\",\r\n        \"Microsoft Game Studios\"\r\n    ],\r\n    \"platforms\": [\r\n        \"Nintendo 64\",\r\n        \"Xbox 360\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove video game",
					"item": [
						{
							"name": "200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states the requested video game was deleted\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"Deleted video game with id '15'.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 Invalid Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states bad request reason\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"The provided id 'invalid!' is invalid.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "invalid!"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is text/plain\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body states video game was not found\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.eql(\"No video game with id '99' could be found.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/video_games/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"video_games",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const baseApiUrl = `http://${pm.environment.get(\"host\")}:${pm.environment.get(\"port\")}`;",
							"",
							"// setup api for testing",
							"pm.sendRequest({",
							"    url: `${baseApiUrl}/api_tests/setup`,",
							"    method: \"GET\"",
							"});",
							"",
							"// function for retrieving expected data",
							"getExpectedData = (pm, expectedDataFileName, callback) => {",
							"    let url = `http://${pm.environment.get(\"expectations_api_host\")}:${pm.environment.get(\"expectations_api_port\")}/${expectedDataFileName}`;",
							"",
							"    pm.sendRequest(url, (err, res) => {",
							"        if (err) {",
							"            throw new Error(err.code);",
							"        }",
							"",
							"        if (res.code == 404) {",
							"            throw new Error(`Could not find expectations data file '${expectedDataFileName}'.`);",
							"        }",
							"",
							"        callback(res.json());",
							"    });",
							"};",
							"",
							"// compare json data",
							"jsonDiff = (pm, expected, actual, key = \"\") => {",
							"    if (!(expected instanceof Object) || !(actual instanceof Object))",
							"    {",
							"        if (expected instanceof Array)",
							"            pm.expect.fail(`Inspecting key '${key}'. Expected value is an array. Actual value is ${actual}.`);",
							"        else if (expected instanceof Object)",
							"            pm.expect.fail(`Inspecting key '${key}'. Expected value is an object. Actual value is ${actual}.`);",
							"",
							"        if (actual instanceof Array)",
							"            pm.expect.fail(`Inspecting key '${key}'. Expected value is ${expected}. Actual value is an array.`);",
							"        else if (actual  instanceof Object)",
							"            pm.expect.fail(`Inspecting key '${key}'. Expected value is ${expected}. Actual value is an object.`);",
							"",
							"        if (expected !== actual)",
							"            pm.expect.fail(`Inspecting key '${key}'. Expected value: ${expected} Actual value: ${actual}.`);",
							"",
							"        return;",
							"    }",
							"",
							"    if (expected instanceof Array && !(actual instanceof Array))",
							"        pm.expect.fail(`Inspecting key '${key}'. Expected value is an array. Actual value is an object.`);",
							"",
							"    if (!(expected instanceof Object) && actual instanceof Array)",
							"        pm.expect.fail(`Inspecting key '${key}'. Expected value is an object. Actual value is an array.`);",
							"",
							"    const expectedKeyValues = Object.entries(expected);",
							"",
							"    expectedLength = expectedKeyValues.length;",
							"    actualLength = Object.entries(actual).length;",
							"",
							"    if (expectedLength !== actualLength) {",
							"        pm.expect.fail(`Inspecting key '${key}'. Expected value length is ${expectedLength}. Actual value length is ${actualLength}`);",
							"    }",
							"",
							"    for (expectedKeyValue of expectedKeyValues) {",
							"        subKey = key + `->${expectedKeyValue[0]}`",
							"",
							"        if (!actual.hasOwnProperty(expectedKeyValue[0])) {",
							"            pm.expect.fail(`Inspecting key '${key}'. Actual does not have key '${expectedKeyValue[0]}'`);",
							"        }",
							"",
							"        jsonDiff(pm, expected[expectedKeyValue[0]], actual[expectedKeyValue[0]], subKey);",
							"    }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}